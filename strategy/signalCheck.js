function checkBuySignal(data, atrArray, macd) {
  try {
    // Validate inputs
    if (!data || !Array.isArray(data) || data.length < 2) {
      console.warn('‚ö†Ô∏è checkBuySignal: Invalid data array');
      return false;
    }

    // Debug MACD object structure
    console.log('üîç MACD object structure:', {
      type: typeof macd,
      keys: macd ? Object.keys(macd) : 'null',
      macdExists: macd?.macd ? 'yes' : 'no',
      signalExists: macd?.signal ? 'yes' : 'no',
      histogramExists: macd?.histogram ? 'yes' : 'no'
    });

    if (!macd || typeof macd !== 'object') {
      console.warn('‚ö†Ô∏è checkBuySignal: MACD is not an object');
      return false;
    }

    // Handle MACD object structure - —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    let macdArray, signalArray;
    
    if (macd.macd && Array.isArray(macd.macd)) {
      macdArray = macd.macd;
      signalArray = macd.signal;
      console.log('üìä Using macd.macd and macd.signal arrays');
    } else {
      console.warn('‚ö†Ô∏è checkBuySignal: Cannot find MACD arrays in object');
      return false;
    }

    if (!Array.isArray(macdArray) || !Array.isArray(signalArray)) {
      console.warn('‚ö†Ô∏è checkBuySignal: MACD arrays are not valid arrays');
      return false;
    }

    if (macdArray.length < 2 || signalArray.length < 2) {
      console.warn('‚ö†Ô∏è checkBuySignal: Insufficient MACD data');
      return false;
    }

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —Å–≤—ñ—á–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    const formattedData = data.map(candle => {
      if (Array.isArray(candle)) {
        // –§–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume]
        return {
          timestamp: candle[0],
          open: candle[1],
          high: candle[2],
          low: candle[3],
          close: candle[4],
          volume: candle[5]
        };
      }
      return candle; // –í–∂–µ –≤ –æ–±'—î–∫—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    });

    const i = formattedData.length - 1;
    const close = formattedData[i].close;
    const low = Math.min(...formattedData.slice(-20).map(c => c.low));
    const waveChangeUp = (formattedData[i].high - low) / low;
    const lastCandle = formattedData[formattedData.length - 1];
    
    // Use the detected MACD arrays
    const macdLine = macdArray[macdArray.length - 1];
    const signalLine = signalArray[signalArray.length - 1];
    const prevMacd = macdArray[macdArray.length - 2];
    const prevSignal = signalArray[signalArray.length - 2];

    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ BUY —É–º–æ–≤–∏:', { 
      waveChangeUp: waveChangeUp.toFixed(6), 
      macdLine: macdLine?.toFixed(6), 
      signalLine: signalLine?.toFixed(6), 
      prevMacd: prevMacd?.toFixed(6), 
      prevSignal: prevSignal?.toFixed(6), 
      close, 
      low,
      candleGreen: lastCandle.close > lastCandle.open
    });

    const buyConditions = {
      waveUp: waveChangeUp > 0.003,
      macdAboveSignal: macdLine > signalLine,
      macdCrossedUp: prevMacd <= prevSignal,
      priceAboveLow: close > low,
      greenCandle: lastCandle.close > lastCandle.open
    };

    console.log('üìä BUY —É—Å–ª–æ–≤–∏—è:', buyConditions);

    return (
      buyConditions.waveUp &&
      buyConditions.macdAboveSignal &&
      buyConditions.macdCrossedUp &&
      buyConditions.priceAboveLow &&
      buyConditions.greenCandle
    );

  } catch (error) {
    console.error('üî¥ checkBuySignal error:', error.message);
    return false;
  }
}

function checkSellSignal(data, atrArray, macd) {
  try {
    // Validate inputs
    if (!data || !Array.isArray(data) || data.length < 2) {
      console.warn('‚ö†Ô∏è checkSellSignal: Invalid data array');
      return false;
    }

    // Debug MACD object structure
    console.log('üîç MACD object structure (SELL):', {
      type: typeof macd,
      keys: macd ? Object.keys(macd) : 'null',
      macdExists: macd?.macd ? 'yes' : 'no',
      signalExists: macd?.signal ? 'yes' : 'no',
      histogramExists: macd?.histogram ? 'yes' : 'no'
    });

    if (!macd || typeof macd !== 'object') {
      console.warn('‚ö†Ô∏è checkSellSignal: MACD is not an object');
      return false;
    }

    // Handle MACD object structure
    let macdArray, signalArray;
    
    if (macd.macd && Array.isArray(macd.macd)) {
      macdArray = macd.macd;
      signalArray = macd.signal;
      console.log('üìä Using macd.macd and macd.signal arrays');
    } else {
      console.warn('‚ö†Ô∏è checkSellSignal: Cannot find MACD arrays in object');
      return false;
    }

    if (!Array.isArray(macdArray) || !Array.isArray(signalArray)) {
      console.warn('‚ö†Ô∏è checkSellSignal: MACD arrays are not valid arrays');
      return false;
    }

    if (macdArray.length < 2 || signalArray.length < 2) {
      console.warn('‚ö†Ô∏è checkSellSignal: Insufficient MACD data');
      return false;
    }

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —Å–≤—ñ—á–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    const formattedData = data.map(candle => {
      if (Array.isArray(candle)) {
        // –§–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume]
        return {
          timestamp: candle[0],
          open: candle[1],
          high: candle[2],
          low: candle[3],
          close: candle[4],
          volume: candle[5]
        };
      }
      return candle; // –í–∂–µ –≤ –æ–±'—î–∫—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    });

    const i = formattedData.length - 1;
    const high = Math.max(...formattedData.slice(-20).map(c => c.high));
    const waveChangeDown = (high - formattedData[i].low) / high;
    const lastCandle = formattedData[formattedData.length - 1];
    
    // Use the detected MACD arrays
    const macdLine = macdArray[macdArray.length - 1];
    const signalLine = signalArray[signalArray.length - 1];
    const prevMacd = macdArray[macdArray.length - 2];
    const prevSignal = signalArray[signalArray.length - 2];

    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SELL —É–º–æ–≤–∏:', { 
      waveChangeDown: waveChangeDown.toFixed(6), 
      macdLine: macdLine?.toFixed(6), 
      signalLine: signalLine?.toFixed(6), 
      prevMacd: prevMacd?.toFixed(6), 
      prevSignal: prevSignal?.toFixed(6),
      close: formattedData[i].close,
      high,
      redCandle: lastCandle.close < lastCandle.open
    });

    const sellConditions = {
      waveDown: waveChangeDown > 0.003,
      macdBelowSignal: macdLine < signalLine,
      macdCrossedDown: prevMacd >= prevSignal,
      priceBelowHigh: formattedData[i].close < high,
      redCandle: lastCandle.close < lastCandle.open
    };

    console.log('üìä SELL —É—Å–ª–æ–≤–∏—è:', sellConditions);

    return (
      sellConditions.waveDown &&
      sellConditions.macdBelowSignal &&
      sellConditions.macdCrossedDown &&
      sellConditions.priceBelowHigh &&
      sellConditions.redCandle
    );

  } catch (error) {
    console.error('üî¥ checkSellSignal error:', error.message);
    return false;
  }
}

module.exports = { checkBuySignal, checkSellSignal };