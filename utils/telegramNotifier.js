const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/config');

class TelegramNotifier {
  constructor() {
    if (config.telegram && config.telegram.token && config.telegram.chatId) {
      this.bot = new TelegramBot(config.telegram.token, {polling: false});
      this.chatId = config.telegram.chatId;
      this.enabled = true;
      console.log('üü¢ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ');
    } else {
      this.enabled = false;
      console.warn('‚ö†Ô∏è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ç–æ–∫–µ–Ω –∞–±–æ chatId');
    }
  }

  async sendMessage(message, markdown = true) {
    if (!this.enabled) return false;
    
    try {
      const options = markdown ? {parse_mode: 'Markdown'} : {};
      await this.bot.sendMessage(this.chatId, message, options);
      console.log('‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return true;
    } catch (error) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
      return false;
    }
  }

  async sendPositionOpened(type, symbol, amount, entryPrice, tpPrice, slPrice, balance) {
    if (!this.enabled) return false;
    
    const positionSize = (amount * entryPrice).toFixed(2);
    const positionPercent = ((amount * entryPrice) / balance * 100).toFixed(1);
    const positionType = type === 'buy' ? 'LONG üü¢' : 'SHORT üî¥';
    const symbolName = symbol.replace('/USDT', '');
    
    const message = `
*${positionType} –ù–û–í–ê –ü–û–ó–ò–¶–Ü–Ø ${symbolName}*

‚ñ´Ô∏è *–ù–∞–ø—Ä—è–º–æ–∫:* ${type.toUpperCase()}
‚ñ´Ô∏è *–û–±—Å—è–≥:* ${amount} ${symbolName}
‚ñ´Ô∏è *–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É:* ${entryPrice.toFixed(2)}
‚ñ´Ô∏è *–¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç:* ${tpPrice.toFixed(2)}
‚ñ´Ô∏è *–°—Ç–æ–ø-–ª–æ—Å—Å:* ${slPrice.toFixed(2)}
‚ñ´Ô∏è *–†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó:* $${positionSize} (${positionPercent}%)
‚ñ´Ô∏è *–ë–∞–ª–∞–Ω—Å:* ${balance.toFixed(2)} USDT
    `;

    return this.sendMessage(message);
  }

  async sendPositionUpdated(newStop, newTakeProfit, currentProfit) {
    if (!this.enabled) return false;
    
    const profitIcon = currentProfit >= 0 ? 'üìà' : 'üìâ';
    const profitSign = currentProfit >= 0 ? '+' : '';
    
    const message = `
*üîÑ –û–ù–û–í–õ–ï–ù–û –£–ú–û–í–ò*

‚ñ´Ô∏è *–ù–æ–≤–∏–π —Å—Ç–æ–ø:* ${newStop.toFixed(2)}
‚ñ´Ô∏è *–ù–æ–≤–∏–π —Ç–µ–π–∫:* ${newTakeProfit.toFixed(2)}
‚ñ´Ô∏è *–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫:* ${profitSign}${currentProfit.toFixed(2)}% ${profitIcon}
    `;

    return this.sendMessage(message);
  }

  async sendPositionClosed(closePrice, profitPercent, profitAmount, newBalance) {
    if (!this.enabled) return false;
    
    const resultIcon = profitPercent >= 0 ? '‚úÖ' : '‚ùå';
    const resultText = profitPercent >= 0 
      ? `*–ü—Ä–∏–±—É—Ç–æ–∫:* +${profitPercent.toFixed(2)}% (+${profitAmount.toFixed(2)} USDT)` 
      : `*–ó–±–∏—Ç–æ–∫:* ${profitPercent.toFixed(2)}% (${profitAmount.toFixed(2)} USDT)`;
    
    const profitSign = profitAmount >= 0 ? '+' : '';
    
    const message = `
*${resultIcon} –ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û*

‚ñ´Ô∏è *–¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:* ${closePrice.toFixed(2)}
‚ñ´Ô∏è ${resultText}
‚ñ´Ô∏è *–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å:* ${newBalance.toFixed(2)} USDT
‚ñ´Ô∏è *–ó–º—ñ–Ω–∞ –±–∞–ª–∞–Ω—Å—É:* ${profitSign}${profitAmount.toFixed(2)} USDT
    `;

    return this.sendMessage(message);
  }

  async sendError(context, error) {
    if (!this.enabled) return false;
    
    const message = `
*üö® –ü–û–ú–ò–õ–ö–ê ${context.toUpperCase()}*

_–î–µ—Ç–∞–ª—ñ:_ ${error.message || error}
_–ß–∞—Å:_ ${new Date().toLocaleString()}
    `;

    return this.sendMessage(message);
  }
}


module.exports = new TelegramNotifier();