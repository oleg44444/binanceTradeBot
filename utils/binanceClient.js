const ccxt = require('ccxt');
const config = require('../config/config');
const telegram = require('./telegramNotifier');

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
let isClientInitialized = false;
let initializationPromise = null;

class CustomBinance extends ccxt.binance {
  constructor(...args) {
    super(...args);
    this.trailingStopUpdateInProgress = false;
    this.listenKey = null;
    this.ws = null;
    this.listenKeyInterval = null;
    this.wsReconnectTimeout = null;
  }

  async createOrder(symbol, type, side, amount, price, params = {}) {
    try {
      if (params.newClientOrderId && params.newClientOrderId.length > 32) {
        params.newClientOrderId = params.newClientOrderId.substring(0, 32);
      }

      const conditionalTypes = ['stop', 'stop_market', 'take_profit', 'take_profit_market'];
      if (conditionalTypes.includes(type) && !params.hasOwnProperty('reduceOnly')) {
        params.reduceOnly = true;
      }

      if (type === 'limit' && !params.timeInForce) {
        params.timeInForce = 'GTC';
      }

      return await super.createOrder(symbol, type, side, amount, price, params);
    } catch (error) {
      console.error('üî¥ Order creation error:', error.message);
      if (error.message.includes('reduce only')) {
        console.log('üîÑ Retrying without reduceOnly');
        const newParams = { ...params };
        delete newParams.reduceOnly;
        return await super.createOrder(symbol, type, side, amount, price, newParams);
      }
      throw error;
    }
  }

  async setLeverage(leverage, symbol) {
    try {
      await this.fapiPrivatePostLeverage({
        symbol: symbol.replace('/', ''),
        leverage: leverage
      });
    } catch (error) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞:', error.message);
      if (!error.message.includes('No need to change leverage')) {
        throw error;
      }
    }
  }

  async setMarginType(symbol, marginType = 'ISOLATED') {
    try {
      await this.fapiPrivatePostMarginType({
        symbol: symbol.replace('/', ''),
        marginType: marginType
      });
      console.log(`‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –º–∞—Ä–∂—ñ ${marginType} –¥–ª—è ${symbol}`);
    } catch (error) {
      if (error.message.includes('No need to change margin type')) {
        console.log(`‚ÑπÔ∏è –¢–∏–ø –º–∞—Ä–∂—ñ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${marginType} –¥–ª—è ${symbol}`);
      } else {
        console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É –º–∞—Ä–∂—ñ:', error.message);
        throw error;
      }
    }
  }

  async fetchPosition(symbol) {
    try {
      const cleanSymbol = symbol.replace('/', '');
      const positions = await this.fetchPositions([cleanSymbol]);
      const position = positions.find(p => 
        p.symbol === cleanSymbol && 
        Math.abs(p.contracts) > 0.001
      );
      
      if (!position) {
        console.log(`‚ÑπÔ∏è No active position for ${symbol}`);
        return null;
      }
      
      return position;
    } catch (error) {
      console.error('üî¥ Position fetch error:', error.message);
      throw error;
    }
  }

  async destroy() {
    try {
      if (this.listenKeyInterval) {
        clearInterval(this.listenKeyInterval);
        this.listenKeyInterval = null;
      }

      if (this.wsReconnectTimeout) {
        clearTimeout(this.wsReconnectTimeout);
        this.wsReconnectTimeout = null;
      }

      if (this.ws) {
        this.ws.removeAllListeners();
        this.ws.close();
        this.ws = null;
      }

      if (this.listenKey) {
        await this.fapiPrivateDeleteListenKey({ listenKey: this.listenKey });
        console.log('üóëÔ∏è ListenKey –≤–∏–¥–∞–ª–µ–Ω–æ');
        this.listenKey = null;
      }

      console.log('‚úÖ CustomBinance –∑–Ω–∏—â–µ–Ω–æ');
    } catch (err) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—É:', err.message);
    }
  }
}

const apiKey = config.binance?.apiKey;
const apiSecret = config.binance?.apiSecret;

if (!apiKey || !apiSecret) {
  throw new Error('‚ùå API –∫–ª—é—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
}

const binance = new CustomBinance({
  apiKey: apiKey.trim(),
  secret: apiSecret.trim(),
  options: {
    defaultType: 'future',
    testnet: config.binance.testnet || false,
    adjustForTimeDifference: true
  },
  enableRateLimit: true,
  timeout: 30000,
  rateLimit: 150
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
process.on('SIGINT', async () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
  await binance.destroy();
  process.exit();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
async function initializeBinanceClient() {
  if (isClientInitialized) {
    console.log('‚ÑπÔ∏è Binance –∫–ª—ñ—î–Ω—Ç –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    return binance;
  }

  try {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤
    await binance.loadMarkets();
    
    const time = await binance.fetchTime();
    console.log('üü¢ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance. –ß–∞—Å —Å–µ—Ä–≤–µ—Ä–∞:', new Date(time).toISOString());

    const cleanSymbol = config.symbol.replace('/', '');

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É
    await binance.setMarginType(config.symbol, 'ISOLATED');
    await binance.setLeverage(config.leverage, config.symbol);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É - –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø
    const balance = await binance.fetchBalance();
    const usdtBalance = balance.total?.USDT || 
                       balance.USDT?.total || 
                       balance.total?.usdt || 
                       balance.usdt?.total || 
                       0;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ä–∂—ñ
    const positions = await binance.fetchPositions([cleanSymbol]);
    const position = positions.find(p => p.symbol === cleanSymbol);
    const usedMargin = position ? Math.abs(position.notional) / config.leverage : 0;
    
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å:', {
      total: usdtBalance,
      available: usdtBalance - usedMargin,
      usedMargin: usedMargin
    });

    if (telegram.enabled) {
      await telegram.sendMessage(
        `üöÄ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n` +
        `- –°–∏–º–≤–æ–ª: ${config.symbol}\n` +
        `- –ë–∞–ª–∞–Ω—Å: ${usdtBalance.toFixed(2)} USDT\n` +
        `- –ü–ª–µ—á–µ: ${config.leverage}x\n` +
        `- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –º–∞—Ä–∂—ñ: ${usedMargin.toFixed(2)} USDT`
      );
    }

    if (usdtBalance < 100) {
      console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –±–∞–ª–∞–Ω—Å –º–µ–Ω—à–µ 100 USDT. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫.');
    }

    isClientInitialized = true;
    console.log('‚úÖ Binance –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    return binance;

  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    if (telegram.enabled) {
      await telegram.sendError('initialization', error);
    }
    throw error;
  }
}
// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—Ä–æ–º—ñ—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
module.exports = (() => {
  if (!initializationPromise) {
    initializationPromise = initializeBinanceClient();
  }
  return initializationPromise;
})();