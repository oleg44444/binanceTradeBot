require('dotenv').config();
const fetchOHLCV = require('./data/fetchOHLCV');
const { calculateATR } = require('./indicators/atr');
const { calculateMACD } = require('./indicators/macd');
const { checkBuySignal, checkSellSignal } = require('./strategy/signalCheck');
const config = require('./config/config');
const binanceClientPromise = require('./utils/binanceClient');
const { initializeTradingModule } = require('./trading/executeOrder');
const { handleTradeSignal } = require('./trading/positionManager');

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let binance;
let trading;
let isRunning = false;
let lastSignalTime = 0;
const SIGNAL_COOLDOWN = 60000;

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üî¥ –ù–µ–≤—ñ–¥–ª–æ–≤–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  process.exit(1);
});
process.on('unhandledRejection', (reason) => {
  console.error('üî¥ –ù–µ–≤—ñ–¥–ª–æ–≤–ª–µ–Ω–∞ –≤—ñ–¥–º–æ–≤–∞:', reason);
  process.exit(1);
});
process.on('SIGINT', () => {
  console.log('\nüî¥ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
  process.exit(0);
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
async function initializeBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    binance = await binanceClientPromise();
    console.log('‚úÖ Binance –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

    try {
      await binance.setMarginType(config.symbol, 'ISOLATED');
      await binance.setLeverage(config.leverage || 20, config.symbol);
      console.log(`‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø–ª–µ—á–µ: ${config.leverage || 20}x`);
    } catch (err) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä–∂—ñ –∞–±–æ –ø–ª–µ—á–∞:', err.message);
    }

    trading = await initializeTradingModule(binance);
    console.log('‚úÖ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥—ñ–≤–ª—ñ –≥–æ—Ç–æ–≤–∏–π');

    const balance = await trading.getAccountBalance();
    console.log(`üí∞ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT`);
    return true;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error.message);
    throw error;
  }
}

// –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
async function runTradingCycle() {
  if (!isRunning) return;

  try {
    console.log('\n--- –¶–∏–∫–ª –∞–Ω–∞–ª—ñ–∑—É ---');
    console.log(`üïê –ß–∞—Å: ${new Date().toLocaleString()}`);

    const candles = await fetchOHLCV(config.symbol, config.timeframe);
    if (!candles || candles.length < 50) {
      console.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
      return;
    }

    const currentPrice = candles.at(-1).close;
    console.log(`üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${currentPrice}`);

    const atrValues = calculateATR(candles, 14);
    const macdData = calculateMACD(candles);
    if (!atrValues || !macdData || atrValues.length === 0) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤');
      return;
    }

    const currentATR = atrValues.at(-1);
    const currentMACD = macdData.macd.at(-1);
    const currentSignal = macdData.signal.at(-1);

    console.log(`üìà ATR: ${currentATR?.toFixed(6)}`);
    console.log(`üìâ MACD: ${currentMACD?.toFixed(6)}`);
    console.log(`üìä Signal: ${currentSignal?.toFixed(6)}`);

    const buySignal = checkBuySignal(candles, atrValues, macdData);
    const sellSignal = checkSellSignal(candles, atrValues, macdData);
    console.log(`üîç Buy Signal: ${buySignal ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîç Sell Signal: ${sellSignal ? '‚úÖ' : '‚ùå'}`);

    const now = Date.now();
    if (now - lastSignalTime < SIGNAL_COOLDOWN) {
      console.log('‚è≥ Cooldown –∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏');
      return;
    }

    const balance = await trading.getAccountBalance();
    const activePosition = trading.getActivePosition();

    // BUY
    if (buySignal && !sellSignal) {
      console.log('üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É!');

      if (activePosition.isOpen && activePosition.side === 'short') {
        console.log('üîÑ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ SHORT –ø–æ–∑–∏—Ü—ñ—é');
        await trading.closePosition();
      }

      console.log(`üí∞ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ BUY –Ω–∞ ${config.tradeAmount} (${config.symbol})`);
      await handleTradeSignal('buy', currentPrice, config.tradeAmount);

      lastSignalTime = now;
    }

    // SELL
    else if (sellSignal && !buySignal) {
      console.log('üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂!');

      if (activePosition.isOpen && activePosition.side === 'long') {
        console.log('üîÑ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ LONG –ø–æ–∑–∏—Ü—ñ—é');
        await trading.closePosition();
      }

      console.log(`üí∞ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ SELL –Ω–∞ ${config.tradeAmount} (${config.symbol})`);
      await handleTradeSignal('sell', currentPrice, config.tradeAmount);

      lastSignalTime = now;
    }

    // –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
    if (activePosition.isOpen) {
      console.log(`üìä –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è: ${activePosition.side} ${activePosition.size} @ ${activePosition.entryPrice}`);
    } else {
      console.log('üìä –ü–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î');
    }

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Ü–∏–∫–ª—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
async function startBot() {
  try {
    await initializeBot();
    isRunning = true;
    console.log(`üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è ${config.symbol} (${config.timeframe})`);
    console.log(`‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${config.updateInterval}ms`);

    const runLoop = async () => {
      if (isRunning) {
        await runTradingCycle();
        setTimeout(runLoop, config.updateInterval);
      }
    };
    runLoop();
  } catch (error) {
    console.error('üî¥ –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
  }
}

startBot();
