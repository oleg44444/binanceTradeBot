'use strict';

require('dotenv').config();
const fetchOHLCV = require('./data/fetchOHLCV');
const { calculateATR } = require('./indicators/atr');
const { calculateMACD } = require('./indicators/macd');
const { checkBuySignal, checkSellSignal } = require('./strategy/signalCheck');
const { executeOrder } = require('./trading/executeOrder');
const config = require('./config/config');
const binance = require('./utils/binanceClient');
const WebSocket = require('ws');
const { checkPositionStatus } = require('./trading/executeOrder');

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–µ–≤—ñ–¥–ª–æ–≤–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–≤—ñ–¥–ª–æ–≤–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  console.error('–ù–µ–≤—ñ–¥–ª–æ–≤–ª–µ–Ω–∞ –≤—ñ–¥–º–æ–≤–∞:', reason);
});

// –í–µ–±—Å–æ–∫–µ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π
const ws = new WebSocket('wss://fstream.binance.com/ws/!forceOrder@arr');

ws.on('message', (data) => {
  try {
    const event = JSON.parse(data);
    if (event.o.x === 'FILLED') {
      console.log('üîµ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ:', event.o.s);
      checkPositionStatus();
    }
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤–µ–±—Å–æ–∫–µ—Ç–∞:', error);
  }
});

ws.on('error', (error) => {
  console.error('üî¥ –í–µ–±—Å–æ–∫–µ—Ç –ø–æ–º–∏–ª–∫–∞:', error.message);
});

let requestCount = 0;
const MAX_REQUESTS_PER_MINUTE = config.maxRequestsPerMinute || 50;

async function safeRequest(fn) {
  if (requestCount >= MAX_REQUESTS_PER_MINUTE) {
    console.log('‚è≥ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç API. –ü–∞—É–∑–∞ 60—Å...');
    await new Promise(resolve => setTimeout(resolve, 60000));
    requestCount = 0;
  }
  requestCount++;
  return await fn();
}

if (!config.updateInterval) {
  console.error('‚ùå –í–∫–∞–∂—ñ—Ç—å updateInterval —É config/config.js');
  process.exit(1);
}

process.on('SIGINT', () => {
  console.log('\nüî¥ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É');
  process.exit();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
async function setLeverageWithRetry(symbol, leverage, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await binance.setLeverage(leverage, symbol);
      console.log(`‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–µ ${leverage}x –¥–ª—è ${symbol}`);
      return true;
    } catch (error) {
      console.error(`üî¥ –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ (—Å–ø—Ä–æ–±–∞ ${attempt}):`, error.message);
      if (attempt < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏
      }
    }
  }
  throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–ª–µ—á–µ –ø—ñ—Å–ª—è ${maxRetries} —Å–ø—Ä–æ–±`);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Ä–∂—ñ —Ç–∞ –ø–ª–µ—á–∞
async function initializeBot() {
  try {
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É –º–∞—Ä–∂—ñ
    await binance.setMarginMode('ISOLATED', config.symbol);
    console.log(`‚ÑπÔ∏è –¢–∏–ø –º–∞—Ä–∂—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ISOLATED –¥–ª—è ${config.symbol}`);
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
    await setLeverageWithRetry(config.symbol, config.leverage || 20);
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    const balance = await binance.fetchBalance();
    console.log('üí∞ Initial balance:', balance.USDT);
    
    return true;
  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    throw error;
  }
}

async function runBot() {
  try {
    await safeRequest(async () => {
      const serverTime = await binance.fetchTime();
      const serverDate = new Date(serverTime);
      
      console.log('\n--- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---');
      console.log(`–ó–∞–ø–∏—Ç ‚Ññ${requestCount}/${MAX_REQUESTS_PER_MINUTE}`);
      console.log(`–ß–∞—Å –±—ñ—Ä–∂—ñ (UTC): ${serverDate.toISOString()}`);

      // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤—ñ—á–æ–∫
      let candles;
      try {
        candles = await fetchOHLCV(config.symbol, config.timeframe);
      } catch (err) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–≤—ñ—á–æ–∫: ${err.message}`);
      }

      // –°—É–≤–æ—Ä–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
      if (!Array.isArray(candles) || candles.length === 0) {
        throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö OHLCV');
      }
      console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${candles.length} —Å–≤—ñ—á–æ–∫`);

      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      let atr, macd;
      try {
        atr = calculateATR(candles, 14);
        macd = calculateMACD(candles.map(c => c.close));
      } catch (indicatorError) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: ${indicatorError.message}`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
      let buySignal = false, sellSignal = false;
      try {
        // –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if (candles && atr && macd) {
          buySignal = checkBuySignal(candles, atr, macd);
          sellSignal = checkSellSignal(candles, atr, macd);
        } else {
          console.error('üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤');
        }
      } catch (signalError) {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤:', signalError.message);
      }

      console.log('--- –°–∏–≥–Ω–∞–ª–∏ ---');
      console.log('Buy Signal:', buySignal);
      console.log('Sell Signal:', sellSignal);

      if (buySignal) {
        console.log('üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ö–£–ü–Ü–í–õ–Æ');
        await executeOrder('buy', config.symbol, config.tradeAmount);
        await handlePostOrderPause();
      } else if (sellSignal) {
        console.log('üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ');
        await executeOrder('sell', config.symbol, config.tradeAmount);
        await handlePostOrderPause();
      } else {
        console.log('‚è∏Ô∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ–º–∞—î');
      }
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error.message);
    console.error(error.stack); // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  } finally {
    setTimeout(runBot, config.updateInterval);
  }
}

async function handlePostOrderPause() {
  console.log('‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  requestCount += 2;  // –ö–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—è –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async function main() {
  try {
    console.log('üü¢ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ');
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    await initializeBot();
    
    // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    runBot();
  } catch (error) {
    console.error('üî¥ –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

main();