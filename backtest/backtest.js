const fetchOHLCV = require('../data/fetchOHLCV');
const { checkBuySignal, checkSellSignal } = require('../strategy/strategy');
const config = require('../config/config');

// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–µ–∫—Ç–µ—Å—Ç—É
const SYMBOL = config.symbol || 'BTC/USDT';
const TIMEFRAME = config.timeframe || '5m';
const LIMIT = 500; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫

async function runBacktest() {
  console.log(`üîç –ó–∞–ø—É—Å–∫ backtest –¥–ª—è ${SYMBOL} (${TIMEFRAME})`);

  const candles = await fetchOHLCV(SYMBOL, TIMEFRAME, LIMIT);

  if (!candles || candles.length < 50) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É');
    return;
  }

  const closes = candles.map(c => c.close);
  const times = candles.map(c => c.time || c.timestamp);

  let balance = 1000; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å (–≤ USDT)
  let position = null;
  let trades = [];

  for (let i = 50; i < closes.length; i++) {
    const currentClose = closes[i];
    const slicedCloses = closes.slice(0, i + 1);
    const time = new Date(times[i]).toLocaleString();

    const buySignal = checkBuySignal(slicedCloses);
    const sellSignal = checkSellSignal(slicedCloses);

    if (buySignal && !position) {
      position = {
        entry: currentClose,
        side: 'long',
        time: time
      };
      console.log(`üü¢ BUY @ ${currentClose.toFixed(2)} (${time})`);
    } else if (sellSignal && position?.side === 'long') {
      const profit = ((currentClose - position.entry) / position.entry) * 100;
      trades.push(profit);
      balance *= 1 + profit / 100;
      console.log(`üî¥ SELL @ ${currentClose.toFixed(2)} ‚û°Ô∏è Profit: ${profit.toFixed(2)}%`);
      position = null;
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
  if (position) {
    const lastPrice = closes.at(-1);
    const profit = ((lastPrice - position.entry) / position.entry) * 100;
    trades.push(profit);
    balance *= 1 + profit / 100;
    console.log(`üì§ –í–∏—Ö—ñ–¥ –ø–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó @ ${lastPrice.toFixed(2)} ‚û°Ô∏è Profit: ${profit.toFixed(2)}%`);
  }

  // –ü—ñ–¥—Å—É–º–∫–∏
  const totalProfit = balance - 1000;
  const winRate = trades.filter(p => p > 0).length / trades.length * 100;

  console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò BACKTEST');
  console.log(`üìà –í—Å—å–æ–≥–æ —É–≥–æ–¥: ${trades.length}`);
  console.log(`üíπ Win-rate: ${winRate.toFixed(2)}%`);
  console.log(`üí∞ –§—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT`);
  console.log(`üìâ PnL: ${totalProfit.toFixed(2)} USDT (${(totalProfit / 1000 * 100).toFixed(2)}%)`);
}

runBacktest();
