const config = require('../config/config');
const { v4: uuidv4 } = require('uuid');
const telegram = require('../utils/telegramNotifier');
const WebSocket = require('ws');

const binanceClientPromise = require('../utils/binanceClient');
let binance;

let ws;
const tradingInterface = {
  executeOrder: null,
  getAccountBalance: null,
  closePosition: null
};

let activePosition = {
  id: null,
  type: null,
  totalAmount: 0,
  entryPrice: 0,
  breakEvenReached: false,
  trailingActivated: false,
  trailingInterval: null,
  lastTrailingUpdate: 0
};

function validateActivePosition() {
  return activePosition.id && 
         activePosition.totalAmount > 0 && 
         activePosition.entryPrice > 0;
}

function setupWebSocketHandlers() {
  if (ws && ws.readyState === WebSocket.OPEN) {
    console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π');
    return;
  }

  console.log('üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±—Å–æ–∫–µ—Ç–∞...');
  ws = new WebSocket('wss://fstream.binance.com/ws/!forceOrder@arr');

  const reconnectWebSocket = () => {
    console.log('üîå –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–µ–±—Å–æ–∫–µ—Ç–∞...');
    setTimeout(() => {
      ws = new WebSocket('wss://fstream.binance.com/ws/!forceOrder@arr');
      setupWebSocketHandlers();
    }, 5000);
  };

  ws.on('open', () => {
    console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
  });

  ws.on('message', async (data) => {
    try {
      const event = JSON.parse(data);
      if (event.o.x === 'FILLED' || event.o.x === 'LIQUIDATED') {
        console.log('üîµ –ü–æ–¥—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:', event.o.s);
        await syncPositionWithExchange();
      }
    } catch (error) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤–µ–±—Å–æ–∫–µ—Ç–∞:', error.message);
    }
  });

  ws.on('error', (error) => {
    console.error('üî¥ –í–µ–±—Å–æ–∫–µ—Ç –ø–æ–º–∏–ª–∫–∞:', error.message);
    reconnectWebSocket();
  });

  ws.on('close', (code, reason) => {
    console.log(`üîå –í–µ–±—Å–æ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ: ${code} - ${reason}`);
    reconnectWebSocket();
  });
  
  setInterval(() => {
    if (ws.readyState !== WebSocket.OPEN) {
      console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
      reconnectWebSocket();
    }
  }, 10000);
}

const RISK_PARAMS = {
  initial: {
    STOP_LOSS: 0.35,
    TAKE_PROFIT: 1.05,
    TRAILING_ACTIVATION: 0.64,
    TRAILING_STOP: 0.2
  },
  aggressive: {
    STOP_LOSS: 0.25,
    TAKE_PROFIT: 0.84,
    TRAILING_ACTIVATION: 0.4,
    TRAILING_STOP: 0.12
  },
  breakEven: {
    STOP_LOSS: 0.14,
    TAKE_PROFIT: 0.7,
    TRAILING_ACTIVATION: 0.32,
    TRAILING_STOP: 0.088
  }
};

const BREAK_EVEN_LEVEL = 1.05;
const MIN_PROFIT_FOR_BREAKEVEN = 0.5;
const COMMISSION_RATE = 0.0004;
const ORDER_UPDATE_INTERVAL = 30000; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
const POSITION_CHECK_INTERVAL = 30000;
const MIN_STOP_DISTANCE_PERCENT = 0.3; // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 0.3%
const ORDER_RETRY_LIMIT = 3;
const RECONNECT_DELAY = 5000;

let accountBalance = 0;

async function safeExchangeCall(fn, ...args) {
  try {
    if (typeof fn !== 'function') {
      throw new Error(`Invalid function call: ${typeof fn}`);
    }
    
    return await fn(...args);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error('üî¥ API Error:', errorMessage);
    
    if (errorMessage.includes('API-key')) {
      console.error('üõë Invalid API keys');
      process.exit(1);
    }
    
    throw error;
  }
}

async function checkExchangeConnection() {
  if (!binance) {
    console.error('üî¥ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Binance –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return false;
  }
  
  try {
    const serverTime = await safeExchangeCall(() => binance.fetchTime());
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ –∞–∫—Ç–∏–≤–Ω–µ');
    return true;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ:', error.message);
    return false;
  }
}

async function getCurrentBalanceSafe() {
  try {
    if (!await checkExchangeConnection()) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ');
    }

    const balance = await safeExchangeCall(() => binance.fetchBalance());
    
    let usdtBalance = 0;
    
    if (balance && typeof balance === 'object') {
      usdtBalance = balance.total?.USDT || 
                    balance.USDT?.total || 
                    balance.total?.usdt || 
                    balance.usdt?.total ||
                    balance.free?.USDT ||
                    balance.USDT?.free ||
                    balance.free?.usdt ||
                    balance.usdt?.free ||
                    0;
    } else {
      console.warn('‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å—É:', typeof balance);
    }
    
    accountBalance = Number(usdtBalance) || 0;
    return accountBalance;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error.message);
    telegram.sendError('balance_fetch', error);
    return accountBalance;
  }
}

async function initAccountBalance() {
  try {
    accountBalance = await getCurrentBalanceSafe();
    console.log(`üí∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±–∞–ª–∞–Ω—Å: ${accountBalance} USDT`);
    
    if (accountBalance === 0) {
      console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –±–∞–ª–∞–Ω—Å USDT –¥–æ—Ä—ñ–≤–Ω—é—î 0. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.');
    }
    
    return accountBalance;
  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–ª–∞–Ω—Å—É:', error.message);
    telegram.sendError('balance_init_fatal', error);
    process.exit(1);
  }
}

function generatePositionId() {
  return `POS_${Date.now()}`;
}

function generateOrderId() {
  return `OID_${Date.now()}_${uuidv4().substring(0, 8)}`;
}

function getCurrentRiskParams() {
  if (activePosition.breakEvenReached) {
    return RISK_PARAMS.breakEven;
  }
  return activePosition.trailingActivated 
    ? RISK_PARAMS.aggressive 
    : RISK_PARAMS.initial;
}

function calculateCurrentProfit(currentPrice) {
  if (!validateActivePosition() || !currentPrice || !activePosition.entryPrice) return 0;
  
  const isLong = activePosition.type === 'buy';
  const priceDifference = isLong 
    ? (currentPrice - activePosition.entryPrice)
    : (activePosition.entryPrice - currentPrice);
  
  const rawProfitPercent = (priceDifference / activePosition.entryPrice) * 100;
  const commission = COMMISSION_RATE * 2 * 100;
  const effectiveProfit = rawProfitPercent - commission;
  
  return Math.max(0, effectiveProfit);
}

async function cancelPositionOrders() {
  if (!activePosition.id) return;
  try {
    await safeExchangeCall(() => binance.cancelAllOrders(config.symbol));
    console.log('üóëÔ∏è –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ');
    telegram.sendMessage(`–°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è ${config.symbol}`);
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:', error.message);
    telegram.sendError('cancel_orders', error);
  }
}

function clearActivePosition() {
  if (activePosition.trailingInterval) {
    clearInterval(activePosition.trailingInterval);
    activePosition.trailingInterval = null;
  }
  
  binance.cancelAllOrders(config.symbol).catch(() => {});
  
  activePosition = {
    id: null,
    type: null,
    totalAmount: 0,
    entryPrice: 0,
    breakEvenReached: false,
    trailingActivated: false,
    trailingInterval: null,
    lastTrailingUpdate: 0
  };
  
  console.log('üßπ –ê–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –æ—á–∏—â–µ–Ω–æ');
}

async function syncPositionWithExchange() {
  if (!binance) {
    console.error('üî¥ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Binance –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return false;
  }
  
  try {
    const positions = await safeExchangeCall(() => binance.fetchPositions());
    
    if (!positions || !Array.isArray(positions)) {
      console.log('üü° –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ');
      return false;
    }
    
    const cleanSymbol = config.symbol.replace('/', '');
    const position = positions.find(pos => 
      pos.symbol === cleanSymbol && 
      pos.contracts && 
      Math.abs(Number(pos.contracts)) > 0
    );
    
    const hasPosition = position && Math.abs(Number(position.contracts)) > 0.001;
    
    if (!hasPosition && activePosition.id) {
      console.log('üîÑ –ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ –Ω–∞ –±—ñ—Ä–∂—ñ. –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω...');
      clearActivePosition();
      return false;
    }
    
    if (hasPosition) {
      if (!activePosition.id) {
        console.log('üîÑ –í–∏—è–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –±—ñ—Ä–∂—ñ. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');
        activePosition.id = generatePositionId();
        activePosition.type = position.side && position.side.toLowerCase() === 'long' ? 'buy' : 'sell';
        activePosition.totalAmount = Math.abs(Number(position.contracts));
        activePosition.entryPrice = Number(position.entryPrice || position.markPrice);
        
        if (activePosition.trailingInterval) clearInterval(activePosition.trailingInterval);
        activePosition.trailingInterval = setInterval(async () => {
          await checkPositionStatus();
          await updateBreakEvenStop(config.symbol);
          await updateTrailingStop(config.symbol);
        }, POSITION_CHECK_INTERVAL);
        
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ –±—ñ—Ä–∂—ñ:', {
          side: activePosition.type,
          amount: activePosition.totalAmount,
          entry: activePosition.entryPrice
        });
        await updateSafetyOrders();
      } else {
        activePosition.totalAmount = Math.abs(Number(position.contracts));
        activePosition.entryPrice = Number(position.entryPrice || position.markPrice);
      }
    }
    
    return hasPosition;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ –±—ñ—Ä–∂–µ—é:', error.message);
    setTimeout(() => syncPositionWithExchange(), 10000);
    return false;
  }
}

async function closePosition(symbol) {
  try {
    await syncPositionWithExchange();
    
    if (!validateActivePosition()) {
      console.log('üî¥ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è');
      return false;
    }
    
    const prevBalance = await getCurrentBalanceSafe();
    const realPosition = await safeExchangeCall(() => binance.fetchPosition(config.symbol));
    
    if (!realPosition || Math.abs(Number(realPosition.contracts)) <= 0.001) {
      console.log('üü° –†–µ–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –±—ñ—Ä–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      clearActivePosition();
      return false;
    }
    
    const realAmount = Math.abs(Number(realPosition.contracts));
    const closeType = realPosition.side.toLowerCase() === 'long' ? 'sell' : 'buy';
    
    console.log(`üîµ –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: ${realPosition.side} ${realAmount} ${symbol.replace('/USDT', '')}`);
    
    const closeOrder = await safeExchangeCall(() =>
      binance.createMarketOrder(
        symbol,
        closeType,
        realAmount,
        { 
          newClientOrderId: generateOrderId(),
          reduceOnly: true
        }
      )
    );
    
    const closePrice = parseFloat(closeOrder.average);
    const profitPercent = calculateCurrentProfit(closePrice);
    const newBalance = await getCurrentBalanceSafe();
    const profitAmount = newBalance - prevBalance;
    
    await telegram.sendPositionClosed(
      closePrice, 
      profitPercent, 
      profitAmount, 
      newBalance
    );
    
    console.log(`‚úÖ –ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞: ${realAmount} –ø–æ ${closePrice}`);
    clearActivePosition();
    
    setTimeout(async () => {
      await syncPositionWithExchange();
    }, 2000);
    
    return true;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:', error.message);
    telegram.sendError('close_position', error);
    await syncPositionWithExchange();
    return false;
  }
}

async function checkPositionStatus() {
  try {
    await syncPositionWithExchange();
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error.message);
    telegram.sendError('position_check', error);
  }
}

async function createProtectedOrder(symbol, type, side, amount, price, params, maxAttempts = 3) {
  let attempt = 0;
  while (attempt < maxAttempts) {
    try {
      console.log(`üîµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: ${symbol} ${type} ${side} ${amount} @ ${price || 'market'}`);
      return await safeExchangeCall(() => 
        binance.createOrder(symbol, type, side, amount, price, params)
      );
    } catch (error) {
      attempt++;
      if (error.code === -2021) {
        console.log('üü° –û—Ä–¥–µ—Ä –Ω–µ –±—É–ª–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ (–Ω–µ–±–µ–∑–ø–µ—á–Ω–∞ —Ü—ñ–Ω–∞)');
        return null;
      }
      
      console.error(`üî¥ –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ (—Å–ø—Ä–æ–±–∞ ${attempt}/${maxAttempts}):`, error.message);
      
      if (attempt >= maxAttempts) {
        throw error;
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
    }
  }
}

async function updateBreakEvenStop(symbol) {
  try {
    if (!validateActivePosition() || activePosition.breakEvenReached) return;
    
    const ticker = await safeExchangeCall(() => binance.fetchTicker(symbol));
    const currentPrice = ticker.last;
    const profitPercent = calculateCurrentProfit(currentPrice);
    
    if (profitPercent < MIN_PROFIT_FOR_BREAKEVEN) return;
    
    if (profitPercent >= BREAK_EVEN_LEVEL) {
      console.log(`üîµ –î–æ—Å—è–≥–Ω—É—Ç–æ —Ä—ñ–≤–µ–Ω—å –±–µ–∑—É–±–∏—Ç–∫—É (${BREAK_EVEN_LEVEL}%): ${profitPercent.toFixed(2)}%`);
      await telegram.sendMessage(`üîµ –î–æ—Å—è–≥–Ω—É—Ç–æ –±–µ–∑—É–±–∏—Ç–æ–∫: ${profitPercent.toFixed(2)}%`);
      
      await new Promise(resolve => setTimeout(resolve, 3000));
      await cancelPositionOrders();
      
      const stopPrice = binance.priceToPrecision(symbol, activePosition.entryPrice);
      const isLong = activePosition.type === 'buy';
      const minStopDistance = currentPrice * (MIN_STOP_DISTANCE_PERCENT / 100);
      const safeStopPrice = isLong 
        ? Math.min(stopPrice, currentPrice - minStopDistance)
        : Math.max(stopPrice, currentPrice + minStopDistance);
      
      await createProtectedOrder(
        symbol,
        'STOP_MARKET',
        activePosition.type === 'buy' ? 'sell' : 'buy',
        activePosition.totalAmount,
        undefined,
        {
          stopPrice: safeStopPrice,
          reduceOnly: true,
          newClientOrderId: generateOrderId()
        }
      );
      
      activePosition.breakEvenReached = true;
      activePosition.trailingActivated = true;
      
      console.log('üü¢ –°—Ç–æ–ø –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –Ω–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å');
      await telegram.sendMessage('üü¢ –°—Ç–æ–ø –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –Ω–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å');
      await updateSafetyOrders();
    }
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –±–µ–∑—É–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ:', error.message);
    telegram.sendError('break_even_stop', error);
  }
}

async function updateTrailingStop(symbol) {
  try {
    if (!validateActivePosition() || !activePosition.entryPrice) return;
    
    const now = Date.now();
    if (now - activePosition.lastTrailingUpdate < ORDER_UPDATE_INTERVAL) return;

    const ticker = await safeExchangeCall(() => binance.fetchTicker(symbol));
    const currentPrice = ticker.last;
    const isLong = activePosition.type === 'buy';
    const riskParams = getCurrentRiskParams();
    const profitPercent = calculateCurrentProfit(currentPrice);
    
    const activationPrice = activePosition.entryPrice * 
      (1 + (isLong ? riskParams.TRAILING_ACTIVATION/100 : -riskParams.TRAILING_ACTIVATION/100));

    if ((isLong && currentPrice > activationPrice) || (!isLong && currentPrice < activationPrice)) {
      const dynamicTrailingStop = Math.max(
        0.08,
        riskParams.TRAILING_STOP - (profitPercent * 0.03)
      );
      
      const newStop = isLong 
        ? currentPrice * (1 - dynamicTrailingStop/100)
        : currentPrice * (1 + dynamicTrailingStop/100);

      const minStopDistance = currentPrice * (MIN_STOP_DISTANCE_PERCENT / 100);
      const safeNewStop = isLong 
        ? Math.min(newStop, currentPrice - minStopDistance)
        : Math.max(newStop, currentPrice + minStopDistance);
      
      await cancelPositionOrders();
      
      await createProtectedOrder(
        symbol,
        'STOP_MARKET',
        isLong ? 'sell' : 'buy',
        activePosition.totalAmount,
        undefined,
        {
          stopPrice: binance.priceToPrecision(symbol, safeNewStop),
          reduceOnly: true,
          newClientOrderId: generateOrderId()
        }
      );
      
      const profitReduction = Math.min(0.4, profitPercent * 0.05);
      const dynamicTakeProfit = riskParams.TAKE_PROFIT * (1 - profitReduction);
      
      const tpPrice = isLong 
        ? activePosition.entryPrice * (1 + dynamicTakeProfit/100)
        : activePosition.entryPrice * (1 - dynamicTakeProfit/100);
      
      await createProtectedOrder(
        symbol,
        'TAKE_PROFIT_MARKET',
        isLong ? 'sell' : 'buy',
        activePosition.totalAmount,
        undefined,
        {
          stopPrice: binance.priceToPrecision(symbol, tpPrice),
          reduceOnly: true,
          newClientOrderId: generateOrderId()
        }
      );
      
      activePosition.trailingActivated = true;
      activePosition.lastTrailingUpdate = now;
      
      console.log(`üîÑ –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: ${safeNewStop.toFixed(2)}`);
      await telegram.sendPositionUpdated(safeNewStop, tpPrice, profitPercent);
    }
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–π–ª—ñ–Ω–≥—É:', error.message);
    telegram.sendError('trailing_stop', error);
  }
}

async function updateSafetyOrders(attempt = 1) {
  console.log('üõ°Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ –±–µ–∑–ø–µ–∫–∏...');
  if (!activePosition || activePosition.totalAmount <= 0) {
    console.log('üü° –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
    return;
  }
  
  if (attempt > ORDER_RETRY_LIMIT) {
    console.error(`üî¥ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–± –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ (${ORDER_RETRY_LIMIT})`);
    telegram.sendError('order_update_limit_reached', new Error(`–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–±: ${ORDER_RETRY_LIMIT}`));
    return;
  }
  
  try {
    await syncPositionWithExchange();
    
    if (!validateActivePosition()) {
      console.log('üü° –ü–æ–∑–∏—Ü—ñ—è –∑–Ω–∏–∫–ª–∞ –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ');
      return;
    }
    
    console.log(`üõ°Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ (—Å–ø—Ä–æ–±–∞ ${attempt}) –¥–ª—è —Å—É–º–∏: ${activePosition.totalAmount}`);
    
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const riskParams = getCurrentRiskParams();
    const [tpPrice, slPrice] = calculatePrices(
      activePosition.type, 
      activePosition.entryPrice,
      riskParams
    );

    const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
    const currentPrice = ticker.last;
    const minStopDistance = currentPrice * (MIN_STOP_DISTANCE_PERCENT / 100);
    const isLong = activePosition.type === 'buy';
    
    const safeSlPrice = isLong 
      ? Math.min(slPrice, currentPrice - minStopDistance)
      : Math.max(slPrice, currentPrice + minStopDistance);
    
    await cancelPositionOrders();
    
    console.log(`üîµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è TP –æ—Ä–¥–µ—Ä–∞: ${tpPrice}`);
    await createProtectedOrder(
      config.symbol,
      'TAKE_PROFIT_MARKET',
      activePosition.type === 'buy' ? 'sell' : 'buy',
      activePosition.totalAmount,
      undefined,
      {
        stopPrice: binance.priceToPrecision(config.symbol, tpPrice),
        reduceOnly: true,
        newClientOrderId: generateOrderId()
      }
    );

    console.log(`üîµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SL –æ—Ä–¥–µ—Ä–∞: ${safeSlPrice}`);
    await createProtectedOrder(
      config.symbol,
      'STOP_MARKET',
      activePosition.type === 'buy' ? 'sell' : 'buy',
      activePosition.totalAmount,
      undefined,
      {
        stopPrice: binance.priceToPrecision(config.symbol, safeSlPrice),
        reduceOnly: true,
        newClientOrderId: generateOrderId()
      }
    );

    console.log(`üõ°Ô∏è –û–Ω–æ–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–∏ –Ω–∞ ${activePosition.totalAmount}: TP ${tpPrice.toFixed(2)}, SL ${safeSlPrice.toFixed(2)}`);
    await telegram.sendMessage(`üõ°Ô∏è –û–Ω–æ–≤–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–∏ –Ω–∞ ${activePosition.totalAmount}: TP ${tpPrice.toFixed(2)}, SL ${safeSlPrice.toFixed(2)}`);
  } catch (error) {
    console.error(`üî¥ –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ (—Å–ø—Ä–æ–±–∞ ${attempt}):`, error.message);
    
    if (attempt < ORDER_RETRY_LIMIT) {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –æ—Ä–¥–µ—Ä–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
      setTimeout(() => updateSafetyOrders(attempt + 1), 5000);
    } else {
      telegram.sendError('update_orders_failed', error);
    }
  }
}

function calculatePrices(type, entryPrice, riskParams) {
  const minDistance = 0.1;
  
  return type === 'buy' 
    ? [
        entryPrice * (1 + Math.max(riskParams.TAKE_PROFIT, minDistance)/100),
        entryPrice * (1 - Math.max(riskParams.STOP_LOSS, minDistance)/100)
      ]
    : [
        entryPrice * (1 - Math.max(riskParams.TAKE_PROFIT, minDistance)/100),
        entryPrice * (1 + Math.max(riskParams.STOP_LOSS, minDistance)/100)
      ];
}

async function executeOrder(type, symbol, amount) {
  try {
    const balance = await getCurrentBalanceSafe();
    await syncPositionWithExchange();
    
    if (validateActivePosition() && activePosition.type !== type) {
      console.log(`üîÑ –°–∏–≥–Ω–∞–ª –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É: ${activePosition.type.toUpperCase()} ‚Üí ${type.toUpperCase()}`);
      await telegram.sendMessage(`üîÑ –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º—É: ${activePosition.type.toUpperCase()} ‚Üí ${type.toUpperCase()}`);
      
      if (!await closePosition(symbol)) {
        console.log('üü† –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è...');
        await telegram.sendMessage('üü† –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó');
        await new Promise(resolve => setTimeout(resolve, 2000));
        await closePosition(symbol);
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    if (validateActivePosition() && activePosition.type === type) {
      const order = await safeExchangeCall(() =>
        binance.createMarketOrder(
          symbol,
          type,
          amount,
          { newClientOrderId: generateOrderId() }
        )
      );
      
      const orderPrice = parseFloat(order.average || order.price || order.lastTradePrice);
      if (isNaN(orderPrice)) {
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –æ—Ä–¥–µ—Ä–∞: ${JSON.stringify(order)}`);
      }
      const totalCost = (activePosition.entryPrice * activePosition.totalAmount) + 
                       (orderPrice * amount);
      activePosition.totalAmount += amount;
      activePosition.entryPrice = totalCost / activePosition.totalAmount;
      activePosition.breakEvenReached = false;
      
      console.log(`üîµ –î–æ–¥–∞–Ω–æ ${amount} ${symbol.replace('/USDT', '')} –ø–æ ${orderPrice}. –ù–æ–≤–∞ —Å—É–º–∞: ${activePosition.totalAmount}`);
      await telegram.sendMessage(`üîµ –î–æ–¥–∞–Ω–æ ${amount} ${symbol.replace('/USDT', '')} –ø–æ ${orderPrice}. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${activePosition.totalAmount}`);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      await updateSafetyOrders();
      return;
    }

    await cancelPositionOrders();
    activePosition.id = generatePositionId();
    activePosition.type = type;
    activePosition.totalAmount = amount;
    activePosition.breakEvenReached = false;
    activePosition.trailingActivated = false;

    const order = await safeExchangeCall(() =>
      binance.createMarketOrder(
        symbol,
        type,
        amount,
        { newClientOrderId: generateOrderId() }
      )
    );
    
    const orderPrice = parseFloat(order.average || order.price || order.lastTradePrice);
    if (isNaN(orderPrice)) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –æ—Ä–¥–µ—Ä–∞: ${JSON.stringify(order)}`);
    }
    activePosition.entryPrice = orderPrice;
    const riskParams = getCurrentRiskParams();
    const [tpPrice, slPrice] = calculatePrices(
      type, 
      activePosition.entryPrice,
      riskParams
    );
    
    await telegram.sendPositionOpened(
      type,
      symbol,
      amount,
      activePosition.entryPrice,
      tpPrice,
      slPrice,
      balance
    );
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    await updateSafetyOrders();

    if (activePosition.trailingInterval) clearInterval(activePosition.trailingInterval);
    
    activePosition.trailingInterval = setInterval(async () => {
      await checkPositionStatus();
      await updateBreakEvenStop(symbol);
      await updateTrailingStop(symbol);
    }, POSITION_CHECK_INTERVAL);

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞:', error.message);
    telegram.sendError('execute_order', error);
    setTimeout(() => executeOrder(type, symbol, amount), 10000);
  }
}

setInterval(() => {
  console.log('üïí –°—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ—ó:', {
    id: activePosition.id,
    amount: activePosition.totalAmount,
    type: activePosition.type,
    entry: activePosition.entryPrice,
    breakEven: activePosition.breakEvenReached,
    trailing: activePosition.trailingActivated
  });
  
  if (ws) {
    console.log('üîå –°—Ç–∞–Ω –≤–µ–±—Å–æ–∫–µ—Ç–∞:', ws.readyState === WebSocket.OPEN ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ' : '–í—ñ–¥–∫–ª—é—á–µ–Ω–æ');
  } else {
    console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
  }
}, 30000);

async function initializeTradingModule(providedBinance = null) {
  try {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ...');
    
    const originalBinance = providedBinance || await binanceClientPromise(); 
    binance = originalBinance;
    
    await initAccountBalance();
    setupWebSocketHandlers();
    await syncPositionWithExchange();
    
    tradingInterface.executeOrder = executeOrder;
    tradingInterface.getAccountBalance = getCurrentBalanceSafe;
    tradingInterface.closePosition = closePosition;

    console.log('‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ—Ä–≥—ñ–≤–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    return tradingInterface;
  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:', error);
    telegram.sendError('module_init_fatal', error);
    process.exit(1);
  }
}

module.exports = {
  initializeTradingModule
};