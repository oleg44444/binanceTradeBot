const config = require('../config/config');
const { v4: uuidv4 } = require('uuid');
const telegram = require('../utils/telegramNotifier');
const WebSocket = require('ws');

const binanceClientPromise = require('../utils/binanceClient');
let binance;

let ws;
const tradingInterface = {
  executeOrder: null,
  getAccountBalance: null,
  closePosition: null
};

let activePosition = {
  id: null,
  type: null,
  totalAmount: 0,
  entryPrice: 0,
  breakEvenReached: false,
  trailingActivated: false,
  trailingInterval: null,
  lastTrailingUpdate: 0
};

function validateActivePosition() {
  return activePosition.id &&
    activePosition.totalAmount > 0 &&
    activePosition.entryPrice > 0;
}
function setupWebSocketHandlers() {
  if (ws && ws.readyState === WebSocket.OPEN) {
    console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π');
    return;
  }

  console.log('üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±—Å–æ–∫–µ—Ç–∞...');
  ws = new WebSocket('wss://fstream.binance.com/ws/!forceOrder@arr');

  const reconnectWebSocket = () => {
    console.log('üîå –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–µ–±—Å–æ–∫–µ—Ç–∞...');
    setTimeout(() => {
      ws = new WebSocket('wss://fstream.binance.com/ws/!forceOrder@arr');
      setupWebSocketHandlers();
    }, 5000);
  };

  ws.on('open', () => {
    console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
  });

  ws.on('message', async (data) => {
    try {
      const event = JSON.parse(data);
      if (event.o.x === 'FILLED' || event.o.x === 'LIQUIDATED') {
        console.log('üîµ –ü–æ–¥—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó:', event.o.s);
        await syncPositionWithExchange();
        await checkAndAutoClosePositionIfNeeded();
      }
    } catch (error) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤–µ–±—Å–æ–∫–µ—Ç–∞:', error.message);
    }
  });

  ws.on('error', (error) => {
    console.error('üî¥ –í–µ–±—Å–æ–∫–µ—Ç –ø–æ–º–∏–ª–∫–∞:', error.message);
    reconnectWebSocket();
  });

  ws.on('close', (code, reason) => {
    console.log(`üîå –í–µ–±—Å–æ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ: ${code} - ${reason}`);
    reconnectWebSocket();
  });

  setInterval(() => {
    if (ws.readyState !== WebSocket.OPEN) {
      console.log('üîå –í–µ–±—Å–æ–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
      reconnectWebSocket();
    }
  }, 10000);
}

const RISK_PARAMS = {
  initial: {
    STOP_LOSS: 0.35,
    TAKE_PROFIT: 1.05,
    TRAILING_ACTIVATION: 0.64,
    TRAILING_STOP: 0.2
  },
  aggressive: {
    STOP_LOSS: 0.25,
    TAKE_PROFIT: 0.84,
    TRAILING_ACTIVATION: 0.4,
    TRAILING_STOP: 0.12
  },
  breakEven: {
    STOP_LOSS: 0.14,
    TAKE_PROFIT: 0.7,
    TRAILING_ACTIVATION: 0.32,
    TRAILING_STOP: 0.088
  }
};

const BREAK_EVEN_LEVEL = 1.05;
const MIN_PROFIT_FOR_BREAKEVEN = 0.5;
const COMMISSION_RATE = 0.0004;
const ORDER_UPDATE_INTERVAL = 30000; // 30 —Å–µ–∫
const POSITION_CHECK_INTERVAL = 30000;
const MIN_STOP_DISTANCE_PERCENT = 0.3;
const ORDER_RETRY_LIMIT = 3;

let accountBalance = 0;

async function safeExchangeCall(fn, ...args) {
  try {
    if (typeof fn !== 'function') throw new Error(`Invalid function call: ${typeof fn}`);
    return await fn(...args);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error('üî¥ API Error:', errorMessage);

    if (errorMessage.includes('API-key')) {
      console.error('üõë Invalid API keys');
      process.exit(1);
    }

    throw error;
  }
}

async function checkExchangeConnection() {
  if (!binance) {
    console.error('üî¥ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Binance –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return false;
  }
  try {
    await safeExchangeCall(() => binance.fetchTime());
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ –∞–∫—Ç–∏–≤–Ω–µ');
    return true;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ:', error.message);
    return false;
  }
}

async function getCurrentBalanceSafe() {
  try {
    if (!await checkExchangeConnection()) throw new Error('–í—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ');
    const balance = await safeExchangeCall(() => binance.fetchBalance());

    let usdtBalance = 0;
    if (balance && typeof balance === 'object') {
      usdtBalance = balance.total?.USDT ||
        balance.USDT?.total ||
        balance.total?.usdt ||
        balance.usdt?.total ||
        balance.free?.USDT ||
        balance.USDT?.free ||
        balance.free?.usdt ||
        balance.usdt?.free ||
        0;
    } else {
      console.warn('‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å—É:', typeof balance);
    }

    accountBalance = Number(usdtBalance) || 0;
    return accountBalance;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error.message);
    telegram.sendError('balance_fetch', error);
    return accountBalance;
  }
}

async function initAccountBalance() {
  try {
    accountBalance = await getCurrentBalanceSafe();
    console.log(`üí∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±–∞–ª–∞–Ω—Å: ${accountBalance} USDT`);

    if (accountBalance === 0) {
      console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –±–∞–ª–∞–Ω—Å USDT –¥–æ—Ä—ñ–≤–Ω—é—î 0. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.');
    }

    return accountBalance;
  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–ª–∞–Ω—Å—É:', error.message);
    telegram.sendError('balance_init_fatal', error);
    process.exit(1);
  }
}

function generatePositionId() {
  return `POS_${Date.now()}`;
}

function generateOrderId() {
  return `OID_${Date.now()}_${uuidv4().substring(0, 8)}`;
}

function getCurrentRiskParams() {
  if (activePosition.breakEvenReached) {
    return RISK_PARAMS.breakEven;
  }
  return activePosition.trailingActivated
    ? RISK_PARAMS.aggressive
    : RISK_PARAMS.initial;
}

function calculateCurrentProfit(currentPrice) {
  if (!validateActivePosition() || !currentPrice || !activePosition.entryPrice) return 0;

  const isLong = activePosition.type === 'buy';
  const priceDifference = isLong
    ? (currentPrice - activePosition.entryPrice)
    : (activePosition.entryPrice - currentPrice);

  const rawProfitPercent = (priceDifference / activePosition.entryPrice) * 100;
  const commission = COMMISSION_RATE * 2 * 100;
  const effectiveProfit = rawProfitPercent - commission;

  return Math.max(0, effectiveProfit);
}

async function cancelPositionOrders() {
  if (!activePosition.id) return;
  try {
    await safeExchangeCall(() => binance.cancelAllOrders(config.symbol));
    console.log('üóëÔ∏è –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ');
    telegram.sendMessage(`–°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è ${config.symbol}`);
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:', error.message);
    telegram.sendError('cancel_orders', error);
  }
}

function clearActivePosition() {
  if (activePosition.trailingInterval) {
    clearInterval(activePosition.trailingInterval);
    activePosition.trailingInterval = null;
  }

  binance.cancelAllOrders(config.symbol).catch(() => { });

  activePosition = {
    id: null,
    type: null,
    totalAmount: 0,
    entryPrice: 0,
    breakEvenReached: false,
    trailingActivated: false,
    trailingInterval: null,
    lastTrailingUpdate: 0
  };

  console.log('üßπ –ê–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –æ—á–∏—â–µ–Ω–æ');
}

async function syncPositionWithExchange() {
  if (!binance) {
    console.error('üî¥ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Binance –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return false;
  }

  try {
    const positions = await safeExchangeCall(() => binance.fetchPositions());

    if (!positions || !Array.isArray(positions)) {
      console.log('üü° –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ');
      return false;
    }

    const cleanSymbol = config.symbol.replace('/', '');
    const position = positions.find(pos =>
      pos.symbol === cleanSymbol &&
      pos.contracts &&
      Math.abs(Number(pos.contracts)) > 0
    );

    const hasPosition = position && Math.abs(Number(position.contracts)) > 0.001;

    if (!hasPosition && activePosition.id) {
      console.log('üîÑ –ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ –Ω–∞ –±—ñ—Ä–∂—ñ. –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω...');
      clearActivePosition();
      return false;
    }

    if (hasPosition) {
      if (!activePosition.id) {
        console.log('üîÑ –í–∏—è–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –±—ñ—Ä–∂—ñ. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');
        activePosition.id = generatePositionId();
        activePosition.type = position.side && position.side.toLowerCase() === 'long' ? 'buy' : 'sell';
        activePosition.totalAmount = Math.abs(Number(position.contracts));
        activePosition.entryPrice = Number(position.entryPrice || position.markPrice);

        if (activePosition.trailingInterval) clearInterval(activePosition.trailingInterval);
        activePosition.trailingInterval = setInterval(async () => {
          await checkPositionStatus();
          await updateBreakEvenStop(config.symbol);
          await updateTrailingStop(config.symbol);
          await checkAndAutoClosePositionIfNeeded();
        }, POSITION_CHECK_INTERVAL);

        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ –±—ñ—Ä–∂—ñ:', {
          side: activePosition.type,
          amount: activePosition.totalAmount,
          entry: activePosition.entryPrice
        });
        await updateSafetyOrders();
      } else {
        activePosition.totalAmount = Math.abs(Number(position.contracts));
        activePosition.entryPrice = Number(position.entryPrice || position.markPrice);
      }
    }

    return hasPosition;
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ—ó:', error.message);
    telegram.sendError('sync_position', error);
    return false;
  }
}

async function updateSafetyOrders() {
  if (!validateActivePosition()) return;

  try {
    await cancelPositionOrders();

    const params = getCurrentRiskParams();

    const currentTicker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
    const currentPrice = currentTicker.last;

    const MIN_STOP_DISTANCE_PERCENT = 0.1;

    function adjustStopPrice(stopPrice, currentPrice, isBuy) {
      if (isBuy) {
        const minAllowed = currentPrice * (1 - MIN_STOP_DISTANCE_PERCENT / 100);
        if (stopPrice >= currentPrice) return minAllowed;
      } else {
        const maxAllowed = currentPrice * (1 + MIN_STOP_DISTANCE_PERCENT / 100);
        if (stopPrice <= currentPrice) return maxAllowed;
      }
      return stopPrice;
    }

    const slRaw = activePosition.type === 'buy'
      ? activePosition.entryPrice * (1 - params.STOP_LOSS / 100)
      : activePosition.entryPrice * (1 + params.STOP_LOSS / 100);

    const tpRaw = activePosition.type === 'buy'
      ? activePosition.entryPrice * (1 + params.TAKE_PROFIT / 100)
      : activePosition.entryPrice * (1 - params.TAKE_PROFIT / 100);

    const slPrice = adjustStopPrice(slRaw, currentPrice, activePosition.type === 'buy');
    const tpPrice = adjustStopPrice(tpRaw, currentPrice, activePosition.type !== 'buy');

    const amount = activePosition.totalAmount;

    console.log(`üõ°Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ –±–µ–∑–ø–µ–∫–∏: TP: ${tpPrice.toFixed(4)}, SL: ${slPrice.toFixed(4)}`);

    const tpOrder = await safeExchangeCall(() => binance.createOrder(
      config.symbol,
      'TAKE_PROFIT_MARKET',
      activePosition.type === 'buy' ? 'sell' : 'buy',
      amount,
      null,
      { stopPrice: tpPrice }
    ));

    const slOrder = await safeExchangeCall(() => binance.createOrder(
      config.symbol,
      'STOP_MARKET',
      activePosition.type === 'buy' ? 'sell' : 'buy',
      amount,
      null,
      { stopPrice: slPrice }
    ));

    console.log('‚úÖ –û—Ä–¥–µ—Ä–∏ –±–µ–∑–ø–µ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    telegram.sendMessage(`–û—Ä–¥–µ—Ä–∏ –±–µ–∑–ø–µ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ: TP ${tpPrice.toFixed(4)}, SL ${slPrice.toFixed(4)}`);

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ –±–µ–∑–ø–µ–∫–∏:', error.message);
    telegram.sendError('create_safety_orders', error);
  }
}

async function checkPositionStatus() {
  console.log('üîç –í—Ö—ñ–¥ —É checkPositionStatus()', activePosition);
  if (!validateActivePosition() || !activePosition.entryPrice) return;

  try {
    const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
    const currentPrice = 
      ticker.last || 
      ticker.close || 
      parseFloat(ticker.info?.lastPrice) || 
      ticker.ask || 
      ticker.bid;

    if (!currentPrice || isNaN(currentPrice)) {
      console.error('‚ùå –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞:', currentPrice);
      return;
    }

    const profit = calculateCurrentProfit(currentPrice);
    console.log(`üìà –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${profit.toFixed(2)}% (—Ü—ñ–Ω–∞: ${currentPrice}, –≤—Ö—ñ–¥: ${activePosition.entryPrice})`);

    let updated = false;

    // üìå –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –î–û –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—ñ–≤
    const currentParams = getCurrentRiskParams();
    console.log(`üîß –ü–æ—Ç–æ—á–Ω—ñ risk-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏:`, currentParams);

    // ‚úÖ –ë—Ä–µ–π–∫-—ñ–≤–µ–Ω
    if (!activePosition.breakEvenReached && profit >= BREAK_EVEN_LEVEL) {
      activePosition.breakEvenReached = true;
      console.log('‚úÖ –†—ñ–≤–µ–Ω—å –±–µ–∑–∑–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ –¥–æ—Å—è–≥–Ω—É—Ç–æ');
      updated = true;
    }

    // ‚úÖ –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø
    if (!activePosition.trailingActivated && profit >= currentParams.TRAILING_ACTIVATION) {
      activePosition.trailingActivated = true;
      console.log('üöÄ –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
      updated = true;
    }

    // üîÑ –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–ª–∞–≥—ñ–≤ ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–¥–µ—Ä–∏
    if (updated) {
      const newParams = getCurrentRiskParams();
      console.log(`üîÅ –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:`, newParams);
      await updateSafetyOrders();
    }

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –ø–æ–∑–∏—Ü—ñ—ó:', error.message, error.stack);
    telegram.sendError('check_position_status', error);
  }
}



async function updateBreakEvenStop(symbol) {
  if (!validateActivePosition()) return;

  // –¢—É—Ç –º–æ–∂–Ω–∞ –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —Å—Ç–æ–ø—É –ø—Ä–∏ break even ‚Äî –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
}

async function updateTrailingStop(symbol) {
  if (!validateActivePosition()) return;

  // –õ–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–π–ª—ñ–Ω–≥ —Å—Ç–æ–ø—É ‚Äî –ø–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É

  try {
    const ticker = await safeExchangeCall(() => binance.fetchTicker(symbol));
    const currentPrice = ticker.last;

    if (!activePosition.trailingActivated) return;

    const params = getCurrentRiskParams();

    let newStopPrice;

    if (activePosition.type === 'buy') {
      newStopPrice = currentPrice * (1 - params.TRAILING_STOP / 100);
      if (newStopPrice > activePosition.entryPrice) {
        // –û–Ω–æ–≤–∏—Ç–∏ –æ—Ä–¥–µ—Ä —Å—Ç–æ–ø–∞ —Ç—É—Ç, —è–∫—â–æ –Ω–æ–≤–∏–π —Å—Ç–æ–ø –≤–∏—â–µ —Å—Ç–∞—Ä–æ–≥–æ
        // –õ–æ–≥—ñ–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
        await updateSafetyOrders();
      }
    } else {
      newStopPrice = currentPrice * (1 + params.TRAILING_STOP / 100);
      if (newStopPrice < activePosition.entryPrice) {
        await updateSafetyOrders();
      }
    }

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø—É:', error.message);
    telegram.sendError('update_trailing_stop', error);
  }
}

async function checkAndAutoClosePositionIfNeeded() {
  if (!validateActivePosition()) return;

  try {
    const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
    const currentPrice = ticker.last;

    const profit = calculateCurrentProfit(currentPrice);

    if (profit < -RISK_PARAMS.initial.STOP_LOSS) {
      console.log('‚ö†Ô∏è –ü—Ä–∏–±—É—Ç–æ–∫ –º–µ–Ω—à–∏–π –∑–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é');
      telegram.sendMessage('–ó–∞–∫—Ä–∏–≤–∞—é –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å—É');
      await closePosition();
    }
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó:', error.message);
    telegram.sendError('auto_close_position', error);
  }
}

async function closePosition() {
  if (!validateActivePosition()) return;

  try {
    console.log(`üõë –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é: ${activePosition.type} ${activePosition.totalAmount} ${config.symbol}`);
    const oppositeSide = activePosition.type === 'buy' ? 'sell' : 'buy';

    await cancelPositionOrders();

    await safeExchangeCall(() => binance.createOrder(
      config.symbol,
      'MARKET',
      oppositeSide,
      activePosition.totalAmount
    ));

    clearActivePosition();

    telegram.sendMessage('–ü–æ–∑–∏—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞');
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:', error.message);
    telegram.sendError('close_position', error);
  }
}

async function openNewPosition(type, amount = config.tradeAmount) {
  try {
    if (!await checkExchangeConnection()) throw new Error('–í—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ');

    if (validateActivePosition()) {
  const isSameDirection =
    (activePosition.type === 'buy' && type === 'buy') ||
    (activePosition.type === 'sell' && type === 'sell');

  if (isSameDirection) {
    console.log('‚ûï –î–æ–∫—É–ø–∫–∞ –≤ —Ç—É –∂ —Å—Ç–æ—Ä–æ–Ω—É...');
    const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
    const price = ticker.last;

    const additionalAmount = config.tradeAmount;

    const totalCost = activePosition.entryPrice * activePosition.totalAmount;
    const additionalCost = price * additionalAmount;
    const newTotalAmount = activePosition.totalAmount + additionalAmount;

    const newAverage = (totalCost + additionalCost) / newTotalAmount;

    activePosition.entryPrice = newAverage;
    activePosition.totalAmount = newTotalAmount;

    await safeExchangeCall(() =>
      binance.createOrder(config.symbol, 'MARKET', type, additionalAmount)
    );

    await updateSafetyOrders();

    telegram.sendMessage(`üìâ –î–æ–∫—É–ø–∫–∞ SHORT: ${additionalAmount} –ø–æ ${price}, –Ω–æ–≤–∞ —Å–µ—Ä–µ–¥–Ω—è: ${newAverage.toFixed(2)}`);
    return;
  } else {
    console.log('üîÅ –°–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π. –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é...');
    await closePosition();
  }
}

    console.log(`üîµ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é: ${type} ${amount} ${config.symbol}`);

    const order = await safeExchangeCall(() =>
      binance.createOrder(config.symbol, 'MARKET', type, amount)
    );

    // üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è entryPrice
    let entryPrice = order?.average || order?.fills?.[0]?.price;

    if (!entryPrice || isNaN(entryPrice)) {
      const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
      entryPrice = ticker.last;
      console.log(`üìå –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É –∑ —Ä–∏–Ω–∫—É (fallback): ${entryPrice}`);
    } else {
      console.log(`üìå –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É –∑ –æ—Ä–¥–µ—Ä–∞: ${entryPrice}`);
    }

    activePosition.id = generatePositionId();
    activePosition.type = type;
    activePosition.totalAmount = amount;
    activePosition.entryPrice = Number(entryPrice);
    activePosition.breakEvenReached = false;
    activePosition.trailingActivated = false;

    await updateSafetyOrders();

    telegram.sendMessage(`üü¢ –ù–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è: ${type} ${amount} ${config.symbol} –∑–∞ —Ü—ñ–Ω–æ—é ${entryPrice}`);

  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:', error.message);
    telegram.sendError('open_position', error);
  }
}


async function initializeTradingModule(providedBinance = null) {
  try {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ...');
    
    const originalBinance = providedBinance || await binanceClientPromise(); 
    binance = originalBinance;
    
    await initAccountBalance();
    setupWebSocketHandlers();
    await syncPositionWithExchange();
    
    tradingInterface.executeOrder = executeOrder;
    tradingInterface.getAccountBalance = getCurrentBalanceSafe;
    tradingInterface.closePosition = closePosition;
    tradingInterface.getActivePosition = getActivePosition;

    console.log('‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ—Ä–≥—ñ–≤–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    return tradingInterface;
  } catch (error) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:', error);
    telegram.sendError('module_init_fatal', error);
    process.exit(1);
  }
}

async function executeOrder(signal) {
  if (!binance) {
    binance = await binanceClientPromise();
    setupWebSocketHandlers();
    await initAccountBalance();
  }

  const { type } = signal;
  const amount = config.tradeAmount; // ‚úÖ –±–µ—Ä–µ–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑ config

  if (!type || !amount) {
    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');
    return;
  }

  const ticker = await safeExchangeCall(() => binance.fetchTicker(config.symbol));
  const price = ticker.last;

  if (!price || isNaN(price)) {
    console.warn('‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ—Ä–¥–µ—Ä–∞:', price);
    return;
  }

  if (validateActivePosition()) {
    const isSameDirection =
      (activePosition.type === 'buy' && type === 'buy') ||
      (activePosition.type === 'sell' && type === 'sell');

    if (isSameDirection) {
      console.log('‚ûï –î–æ–∫—É–ø–∫–∞ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –ø–æ–∑–∏—Ü—ñ—ó...');

      const totalCost = activePosition.entryPrice * activePosition.totalAmount;
      const additionalCost = price * amount;
      const newTotalAmount = activePosition.totalAmount + amount;
      const newAveragePrice = (totalCost + additionalCost) / newTotalAmount;

      // üîÑ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
      activePosition.entryPrice = newAveragePrice;
      activePosition.totalAmount = newTotalAmount;

      // üü¢ –≤–∏–∫–æ–Ω—É—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä
      await safeExchangeCall(() =>
        binance.createOrder(config.symbol, 'MARKET', type, amount)
      );

      // üîÅ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è SL/TP
      await updateSafetyOrders();

      telegram.sendMessage(`‚ûï –î–æ–∫—É–ø–∫–∞ ${amount} ${config.symbol} –ø–æ ${price.toFixed(2)}. –ù–æ–≤–∞ —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É: ${newAveragePrice.toFixed(4)}`);
      return;
    } else {
      console.log('üîÅ –°–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ...');
      await closePosition();
    }
  }

  console.log(`üü¢ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é: ${type} ${amount} ${config.symbol}`);

  const order = await safeExchangeCall(() =>
    binance.createOrder(config.symbol, 'MARKET', type, amount)
  );

  // üí° —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É
  const entryPrice = parseFloat(order?.fills?.[0]?.price) || price;

  activePosition.id = generatePositionId();
  activePosition.type = type;
  activePosition.totalAmount = amount;
  activePosition.entryPrice = entryPrice;
  activePosition.breakEvenReached = false;
  activePosition.trailingActivated = false;

  await updateSafetyOrders();

  telegram.sendMessage(`üü¢ –ù–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è: ${type} ${amount} ${config.symbol} –ø–æ —Ü—ñ–Ω—ñ ${entryPrice.toFixed(4)}`);
}


function getActivePosition() {
  return {
    isOpen: validateActivePosition(),
    side: activePosition.type === 'buy' ? 'long' : activePosition.type === 'sell' ? 'short' : null,
    size: activePosition.totalAmount,
    entryPrice: activePosition.entryPrice
  };
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
module.exports = {
  initializeTradingModule,
  closePosition,
  syncPositionWithExchange,
  getCurrentBalanceSafe,
  updateSafetyOrders,
  checkPositionStatus,
  updateTrailingStop,
  getActivePosition,
  openNewPosition,
};